# -*- coding: mbcs -*-
from part import *
from step import *
from material import *
from section import *
from assembly import *
from interaction import *
from mesh import *
from visualization import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='restartMode')
del mdb.models['Model-1']
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models['Model-1'].Material(name='Inconel718')
mdb.models['Model-1'].materials['Inconel718'].SpecificHeat(dependencies=0, law=
    CONSTANTVOLUME, table=((4406000.0, 20.0), (459700.0, 100.0), (486700.0, 
    300.0), (520900.0, 500.0), (559900.0, 600.0), (610900.0, 700.0), (662000.0, 
    800.0), (651000.0, 900.0), (673000.0, 1000.0), (710100.0, 1200.0), (
    710100.0, 1500.0)), temperatureDependency=ON)
mdb.models['Model-1'].materials['Inconel718'].setValues(materialIdentifier='')
mdb.models['Model-1'].materials['Inconel718'].setValues(description=
    'Damage model and specific heat from DA718 [PENG20]\nProperties from literature - Mass Scaling 1000')
mdb.models['Model-1'].materials['Inconel718'].Elastic(dependencies=0, moduli=
    LONG_TERM, noCompression=OFF, noTension=OFF, table=((202565, 0.29, 21.11), 
    (201168, 0.29, 37.78), (198374, 0.29, 93.33), (195580, 0.28, 148.89), (
    192786, 0.28, 204.44), (189294, 0.28, 260), (186500, 0.27, 315.56), (
    183007, 0.27, 371.11), (180213, 0.27, 426.67), (176721, 0.27, 482.22), (
    173228, 0.27, 537.78), (169037, 0.28, 593.33), (165545, 0.28, 648.89), (
    160655, 0.29, 704.44), (155766, 0.31, 760), (148781, 0.32, 815.56), (
    141097, 0.33, 871.11), (131318, 0.33, 926.67), (121539, 0.34, 982.22), (
    111062, 0.37, 1037.78), (99885.5, 0.4, 1093.33)), temperatureDependency=ON, 
    type=ISOTROPIC)
mdb.models['Model-1'].materials['Inconel718'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((8.22e-06, ), ), 
    temperatureDependency=OFF)
mdb.models['Model-1'].materials['Inconel718'].InelasticHeatFraction(fraction=
    0.9)
mdb.models['Model-1'].materials['Inconel718'].Conductivity(dependencies=0, 
    table=((11.39, 21.11), (12.55, 93.33), (14.42, 204.44), (16.15, 315.56), (
    17.88, 426.67), (19.62, 537.78), (21.35, 648.89), (23.22, 760), (24.95, 
    871.11), (26.83, 982.22), (28.7, 1093.33)), temperatureDependency=ON, type=
    ISOTROPIC)
mdb.models['Model-1'].materials['Inconel718'].JohnsonCookDamageInitiation(
    alpha=0.0, definition=MSFLD, dependencies=0, direction=NMORI, feq=10.0, 
    fnn=10.0, fnt=10.0, frequency=1, ks=0.0, numberImperfections=4, omega=1.0, 
    position=CENTROID, table=((0.04, 0.75, -1.45, 0.04, 0.89, 1260, 25, 
    0.0001), ), temperatureDependency=OFF, tolerance=0.05)
mdb.models['Model-1'].materials['Inconel718'].johnsonCookDamageInitiation.DamageEvolution(
    degradation=MAXIMUM, dependencies=0, mixedModeBehavior=MODE_INDEPENDENT, 
    modeMixRatio=ENERGY, power=None, softening=TABULAR, table=((0, 0), (
    0.042900728, 0.0003298), (0.083303112, 0.0006596), (0.121352644, 
    0.0009894), (0.157186345, 0.0013192), (0.190933252, 0.001649), (
    0.222714893, 0.0019788), (0.252645716, 0.0023086), (0.280833503, 
    0.0026384), (0.30737976, 0.0029682), (0.332380085, 0.003298), (0.355924503, 
    0.0036278), (0.378097802, 0.0039576), (0.398979828, 0.0042874), (
    0.41864578, 0.0046172), (0.437166475, 0.004947), (0.45460861, 0.0052768), (
    0.471034993, 0.0056066), (0.486504779, 0.0059364), (0.501073674, 
    0.0062662), (0.514794143, 0.006596), (0.527715594, 0.0069258), (
    0.539884558, 0.0072556), (0.551344857, 0.0075854), (0.56213776, 0.0079152), 
    (0.572302133, 0.008245), (0.58187458, 0.0085748), (0.59088957, 0.0089046), 
    (0.599379568, 0.0092344), (0.607375148, 0.0095642), (0.614905101, 
    0.009894), (0.621996543, 0.0102238), (0.628675012, 0.0105536), (
    0.634964558, 0.0108834), (0.640887829, 0.0112132), (0.646466155, 0.011543), 
    (0.651719625, 0.0118728), (0.656667156, 0.0122026), (0.661326566, 
    0.0125324), (0.665714633, 0.0128622), (0.669847159, 0.013192), (
    0.673739025, 0.0135218), (0.677404247, 0.0138516), (0.680856023, 
    0.0141814), (0.684106782, 0.0145112), (0.687168233, 0.014841), (
    0.690051398, 0.0151708), (0.692766661, 0.0155006), (0.6953238, 0.0158304), 
    (0.697732022, 0.0161602), (0.7, 0.01649)), temperatureDependency=OFF, type=
    DISPLACEMENT)
mdb.models['Model-1'].materials['Inconel718'].Plastic(dataType=HALF_CYCLE, 
    dependencies=0, hardening=JOHNSON_COOK, numBackstresses=1, rate=OFF, 
    strainRangeDependency=OFF, table=((1200.0, 800.0, 0.4, 1.55, 1260.0, 25.0), 
    ), temperatureDependency=OFF)
mdb.models['Model-1'].materials['Inconel718'].plastic.RateDependent(
    dependencies=0, table=((0.0135, 0.001), ), temperatureDependency=OFF, type=
    JOHNSON_COOK)
mdb.models['Model-1'].Material(name='EMT210 - Extramet')
mdb.models['Model-1'].materials['EMT210 - Extramet'].Elastic(dependencies=0, 
    moduli=LONG_TERM, noCompression=OFF, noTension=OFF, table=((580000.0, 
    0.22), ), temperatureDependency=OFF, type=ISOTROPIC)
mdb.models['Model-1'].materials['EMT210 - Extramet'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((1.445e-05, ), ), 
    temperatureDependency=OFF)
mdb.models['Model-1'].materials['EMT210 - Extramet'].setValues(description=
    '[SPRI02] Mass Scaling 1000\n89.0 % Wolframcarbid\n')
mdb.models['Model-1'].materials['EMT210 - Extramet'].SpecificHeat(dependencies=
    0, law=CONSTANTVOLUME, table=((222000.0, 87.0), (243000.0, 177.0), (
    259000.0, 277.0), (268000.0, 377.0), (293000.0, 477.0), (301000.0, 577.0), 
    (314000.0, 687.0)), temperatureDependency=ON)
mdb.models['Model-1'].materials['EMT210 - Extramet'].setValues(
    materialIdentifier='')
mdb.models['Model-1'].materials['EMT210 - Extramet'].Conductivity(dependencies=
    0, table=((85.0, 20.0), (70.4, 500.0), (68.6, 550.0), (68.4, 600.0), (66.8, 
    650.0), (64.7, 700.0)), temperatureDependency=ON, type=ISOTROPIC)
mdb.models['Model-1'].ConstrainedSketch(name='sketchChipPlate', sheetSize=
    200.0)
mdb.models['Model-1'].sketches['sketchChipPlate'].rectangle(point1=(0.0, 0.0), 
    point2=(2.15, 0.01))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='ChipPlate', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['ChipPlate'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['sketchChipPlate'])
mdb.models['Model-1'].parts['ChipPlate'].ReferencePoint(point=(0.0, 0.01, 
    0.01))
mdb.models['Model-1'].parts['ChipPlate'].Set(name='PlateRP', referencePoints=(
    mdb.models['Model-1'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['Model-1'].parts['ChipPlate'].Set(name='PlateRP', referencePoints=(
    mdb.models['Model-1'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['Model-1'].parts['ChipPlate'].Set(cells=
    mdb.models['Model-1'].parts['ChipPlate'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='PlateDomain')
mdb.models['Model-1'].HomogeneousSolidSection(material='Inconel718', name=
    'ChipPlateSection', thickness=None)
mdb.models['Model-1'].parts['ChipPlate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['ChipPlate'].sets['PlateDomain'], sectionName=
    'ChipPlateSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['ChipPlate'].Surface(name='ChipPlateSurface', 
    side1Faces=
    mdb.models['Model-1'].parts['ChipPlate'].faces.getSequenceFromMask((
    '[#3f ]', ), ))
mdb.models['Model-1'].parts['ChipPlate'].setElementType(elemTypes=(None, 
    ElemType(elemCode=C3D6, elemLibrary=EXPLICIT), ElemType(elemCode=C3D4, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['ChipPlate'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['ChipPlate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['ChipPlate'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    33.75, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(33.75, 2.5), point2=
    (33.75, 10.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(30.0, 11.25), 
    point2=(20.0, 11.25))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.5, 13.75), 
    point2=(17.5, 23.75))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.75, 23.75), 
    point2=(0.0, 23.75))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 21.25), point2=
    (0.0, 5.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    16.3909759521484, -5.15337371826172), value=3.8, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].VerticalDimension(textPoint=(
    -3.11485934257507, 5.61979579925537), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    3.8, 3.125), value=2.35, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7])
mdb.models['Model-1'].sketches['__profile__'].VerticalDimension(textPoint=(
    5.7988452911377, 0.750127792358398), value=0.525, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Eulerian', type=
    EULERIAN)
mdb.models['Model-1'].parts['Eulerian'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.22, name='__profile__', 
    sheetSize=8.83, transform=
    mdb.models['Model-1'].parts['Eulerian'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Eulerian'].faces[6], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Eulerian'].edges[4], 
    sketchOrientation=RIGHT, origin=(1.41412, 1.016452, 0.02)))
mdb.models['Model-1'].parts['Eulerian'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.935, -0.605), 
    point2=(0.935, -0.824999999976717))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.44, 0.165), 
    point2=(-0.44, -0.495000000055879))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.165, 0.44), 
    point2=(-0.165, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.275, 0.275), 
    point2=(0.275, 0.0549999999674037))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.66, -0.33), 
    point2=(-0.11, -0.33))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[15])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.99, -0.66), 
    point2=(0.11, -0.66))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.55, -0.825), 
    point2=(-0.222122233593836, -0.825))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[18])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[19], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.495, -0.605), 
    point2=(-0.274999999953434, -0.605))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[20])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[21], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.77, 0.11), 
    point2=(0.165000000037253, 0.11))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[22], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[23])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.045, -0.11), 
    point2=(0.0, -0.11))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[24], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[25], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -1.68507532417297, -0.90773503527832), value=0.2)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -1.90749935447693, -0.912672207214355), value=0.35)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.13980893432617, -0.922546789505005), value=0.5)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.41166071235657, -1.01141731486511), value=0.625)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.64878467857361, -0.829298302986145), value=1.0)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], textPoint=(
    -0.843816559906006, 1.32369954838562), value=1.75)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], textPoint=(
    -0.478982728118897, 1.47714264645386), value=2.05)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], textPoint=(
    -1.00703195869446, 1.64976604237366), value=2.25)
mdb.models['Model-1'].parts['Eulerian'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Eulerian'].faces.getSequenceFromMask((
    '[#40 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['Model-1'].parts['Eulerian'].edges[4])
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[3], 
    mdb.models['Model-1'].parts['Eulerian'].edges[4], 
    mdb.models['Model-1'].parts['Eulerian'].edges[13], 
    mdb.models['Model-1'].parts['Eulerian'].edges[16], 
    mdb.models['Model-1'].parts['Eulerian'].edges[31], 
    mdb.models['Model-1'].parts['Eulerian'].edges[34], 
    mdb.models['Model-1'].parts['Eulerian'].edges[50]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[85], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[30], 
    mdb.models['Model-1'].parts['Eulerian'].edges[37], 
    mdb.models['Model-1'].parts['Eulerian'].edges[44], 
    mdb.models['Model-1'].parts['Eulerian'].edges[49], 
    mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[63], 
    mdb.models['Model-1'].parts['Eulerian'].edges[74]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[90], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[51], 
    mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[66], 
    mdb.models['Model-1'].parts['Eulerian'].edges[70], 
    mdb.models['Model-1'].parts['Eulerian'].edges[79], 
    mdb.models['Model-1'].parts['Eulerian'].edges[80], 
    mdb.models['Model-1'].parts['Eulerian'].edges[88]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[95], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[72], 
    mdb.models['Model-1'].parts['Eulerian'].edges[83], 
    mdb.models['Model-1'].parts['Eulerian'].edges[92]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[16], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#8 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[61], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[103], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#10 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[76], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[5], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#20 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[88], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[15], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#40 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[93], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[22], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[93], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[13], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[94], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[12], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[103], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[11], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[111], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[18], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#400 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[121], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[24], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#800 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[125], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[31], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[123], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[42], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[123], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[48], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#10000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[130], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[54], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#20000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[138], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[66], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#40000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[148], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[70], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#80000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[151], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[74], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[149], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[78], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[149], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[82], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#80000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[156], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[86], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[164], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[94], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[172], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[99], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#400000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[173], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[104], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#800000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[174], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[112], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#1000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[175], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[116], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#1000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[179], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[154], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#2000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[183], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[161], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#4000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[187], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[166], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].Set(faces=
    mdb.models['Model-1'].parts['Eulerian'].faces.getSequenceFromMask((
    '[#0:2 #11000000 #5 #100 ]', ), ), name='WorkpieceBottom')
mdb.models['Model-1'].parts['Eulerian'].Set(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), name='EulerDomain')
mdb.models['Model-1'].parts['Eulerian'].Set(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#e0fc0e00 ]', ), ), name='WorkpieceDomain')
mdb.models['Model-1'].EulerianSection(data={'inconel718-1': 'Inconel718'}, 
    name='EulerSection')
mdb.models['Model-1'].parts['Eulerian'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Eulerian'].sets['EulerDomain'], sectionName=
    'EulerSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Eulerian'].setElementType(elemTypes=(ElemType(
    elemCode=EC3D8RT, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=EXPLICIT), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), ))
mdb.models['Model-1'].parts['Eulerian'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:4 #4808082 #10000002 #4 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:4 #40241008 #20000050 ]', ), ), maxSize=0.03, minSize=0.015)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:2 #80000000 #1081404 #0 #2080000 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:3 #308400c2 #0 #200000 ]', ), ), maxSize=0.01, minSize=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#42800000 #61414a53 #14a194d1 #0:2 #8838000 ]', ), ), minSizeFactor=0.1, 
    size=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#428505 #0:4 #1400 #1 ]', ), ), minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0 #2000000 #0:3 #40000000 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0 #18000000 #0 #14000 #0 #1402000 #10 ]', ), ), maxSize=0.03, minSize=
    0.015)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#346800 #342180 #631c6000 #302318 #9a584000 #403a5 #2 ]', ), ), 
    minSizeFactor=0.1, size=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#200000d0 #8 #208 #6000000 #12040 ]', ), ), minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#14000000 #4 #104 #40000000 #521 #84000000 ]', ), ), minSizeFactor=0.1, 
    size=0.02)
mdb.models['Model-1'].parts['Eulerian'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='SketchTool', sheetSize=200.0)
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(0.0, 0.0), point2=(
    10.6401720046997, 0.0))
mdb.models['Model-1'].sketches['SketchTool'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[2])
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(0.0, 10.0), point2=(
    0.0, 1.25))
mdb.models['Model-1'].sketches['SketchTool'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3], 
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2]))
mdb.models['Model-1'].sketches['SketchTool'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(3.31129169464111, 
    1.25408506393433), point2=(11.7126932144165, 5.62865686416626))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(11.98082447052, 
    7.72666597366333), point2=(11.98082447052, 13.75))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(9.38889980316162, 
    13.6635837554932), point2=(3.17722415924072, 13.6635837554932))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(3.75, 12.5), point2=(
    2.99847316741943, 3.93239545822144))
mdb.models['Model-1'].sketches['SketchTool'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[6])
mdb.models['Model-1'].sketches['SketchTool'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[5])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[5])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[7])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[9])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[4], line2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2], textPoint=(
    18.2371864318848, 2.41468572616577), value=6.0)
mdb.models['Model-1'].sketches['SketchTool'].ObliqueDimension(textPoint=(
    10.5507974624634, -1.29030799865723), value=0.5, vertex1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[5])
mdb.models['Model-1'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[7], line2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3], textPoint=(
    0.31717586517334, 7.36955785751343), value=6.0)
mdb.models['Model-1'].sketches['SketchTool'].ObliqueDimension(textPoint=(0.0, 
    8.75), value=0.5, vertex1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[4], curve2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[7], nearPoint1=(
    3.86042213439941, 1.10268461704254), nearPoint2=(4.32205963134766, 
    0.249606490135193), radius=0.01)
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Tool', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Tool'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['SketchTool'])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.03, name='__profile__', 
    sheetSize=1.41, transform=
    mdb.models['Model-1'].parts['Tool'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Tool'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Tool'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.259921, 0.250539, 0.02)))
mdb.models['Model-1'].parts['Tool'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.1425, -0.225), 
    point2=(0.135, -0.2025))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.2025, -0.165), 
    point2=(-0.1725, -0.015))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.250097722407341, 
    -0.243631335760593), point2=(-0.25009772240734, -0.24750000002794))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.257777099158525, 
    -0.239467180187941), point2=(-0.25196271459572, -0.239467180187941))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[33], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[30]))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].parts['Tool'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Tool'].faces.getSequenceFromMask(('[#20 ]', ), 
    ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['Tool'].edges[7])
mdb.models['Model-1'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['Tool'].edges[3], 
    mdb.models['Model-1'].parts['Tool'].edges[7]), line=
    mdb.models['Model-1'].parts['Tool'].edges[15], sense=REVERSE)
mdb.models['Model-1'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['Tool'].edges[12], 
    mdb.models['Model-1'].parts['Tool'].edges[14]), line=
    mdb.models['Model-1'].parts['Tool'].edges[20], sense=REVERSE)
mdb.models['Model-1'].parts['Tool'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Tool'].InterestingPoint(
    mdb.models['Model-1'].parts['Tool'].edges[8], MIDDLE))
mdb.models['Model-1'].parts['Tool'].Set(name='ToolRP', referencePoints=(
    mdb.models['Model-1'].parts['Tool'].referencePoints[5], ))
mdb.models['Model-1'].parts['Tool'].Set(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#7f ]', ), 
    ), name='ToolDomain')
mdb.models['Model-1'].HomogeneousSolidSection(material='EMT210 - Extramet', 
    name='ToolSection', thickness=None)
mdb.models['Model-1'].parts['Tool'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Tool'].sets['ToolDomain'], sectionName=
    'ToolSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Tool'].Surface(name='ToolSurface', side1Faces=
    mdb.models['Model-1'].parts['Tool'].faces.getSequenceFromMask(('[#19000 ]', 
    ), ))
mdb.models['Model-1'].parts['Tool'].setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask((
    '[#f ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['Tool'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['Tool'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#f ]', ), 
    ), ))
mdb.models['Model-1'].parts['Tool'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#2242490 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#480a40 ]', ), ), maxSize=0.03, minSize=0.01)
mdb.models['Model-1'].parts['Tool'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#3190d005 ]', ), ), minSizeFactor=0.1, size=0.003)
mdb.models['Model-1'].parts['Tool'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#8 ]', ), 
    ))
mdb.models['Model-1'].parts['Tool'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#10000000 ]', ), ), number=4)
mdb.models['Model-1'].parts['Tool'].generateMesh()
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='ChipPlate-1', 
    part=mdb.models['Model-1'].parts['ChipPlate'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Eulerian-1', 
    part=mdb.models['Model-1'].parts['Eulerian'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Tool-1', part=
    mdb.models['Model-1'].parts['Tool'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ChipPlate-1', ), 
    vector=(0, 0.535, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Tool-1', ), vector=
    (2.269009, 0.525, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Tool-1', ), vector=
    (0.0, -0.025, 0.0))
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].cells.getSequenceFromMask(
    mask=('[#ffffffff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].cells.getSequenceFromMask(
    mask=('[#f ]', ), ), name='AssembleSet')
mdb.models['Model-1'].TempDisplacementDynamicsStep(improvedDtMethod=ON, name=
    'CuttingStep', previous='Initial', timePeriod=0.006)
mdb.models['Model-1'].FieldOutputRequest(createStepName='CuttingStep', name=
    'FieldOutput', variables=('CSTRESS', 'DMICRT', 'ER', 'EVF', 'NT', 'PE', 
    'PEEQ', 'PEEQMAX', 'RF', 'S', 'SDEG'))
mdb.models['Model-1'].fieldOutputRequests['FieldOutput'].setValues(
    numIntervals=50)
mdb.models['Model-1'].HistoryOutputRequest(createStepName='CuttingStep', name=
    'CuttingForce', numIntervals=1000, rebar=EXCLUDE, region=
    mdb.models['Model-1'].rootAssembly.allInstances['Tool-1'].sets['ToolRP'], 
    sectionPoints=DEFAULT, variables=('RF1', 'RF2'))
del mdb.models['Model-1'].fieldOutputRequests['F-Output-1']
del mdb.models['Model-1'].historyOutputRequests['H-Output-1']
mdb.models['Model-1'].ContactProperty('chip-plate-contact')
mdb.models['Model-1'].interactionProperties['chip-plate-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.01, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['chip-plate-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('self-contact')
mdb.models['Model-1'].interactionProperties['self-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.015, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['self-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('tool-chip-contact')
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.5544, 0.0), (0.5544, 25.0), (0.5544, 50.0), (0.5544, 75.0), (
    0.5544, 100.0), (0.5544, 125.0), (0.5544, 150.0), (0.5544, 175.0), (0.5544, 
    200.0), (0.5544, 225.0), (0.5544, 250.0), (0.5544, 275.0), (0.5544, 300.0), 
    (0.5544, 325.0), (0.5544, 350.0), (0.5544, 375.0), (0.5544, 400.0), (
    0.5544, 425.0), (0.5544, 450.0), (0.5544, 475.0), (0.5544, 500.0), (0.5544, 
    525.0), (0.5544, 550.0), (0.5544, 575.0), (0.5544, 600.0), (0.5544, 625.0), 
    (0.5544, 650.0), (0.5544, 675.0), (0.5544, 680.0), (0.5535, 680.1), (
    0.5084, 700.0), (0.4706, 725.0), (0.4383, 750.0), (0.4088, 775.0), (0.3814, 
    800.0), (0.3554, 825.0), (0.3306, 850.0), (0.3067, 875.0), (0.2836, 900.0), 
    (0.2612, 925.0), (0.2394, 950.0), (0.2181, 975.0), (0.1972, 1000.0), (
    0.1768, 1025.0), (0.1567, 1050.0), (0.137, 1075.0), (0.1177, 1100.0), (
    0.0986, 1125.0), (0.0798, 1150.0), (0.0613, 1175.0), (0.043, 1200.0), (
    0.0249, 1225.0), (0.0071, 1250.0), (0.0, 1260.0), (0.0, 1350.0), (0.0, 
    1375.0), (0.0, 1400.0), (0.0, 1425.0), (0.0, 1450.0), (0.0, 1475.0), (0.0, 
    1500.0), (0.0, 1525.0), (0.0, 1550.0), (0.0, 1575.0), (0.0, 1600.0), (0.0, 
    1625.0), (0.0, 1650.0), (0.0, 1675.0), (0.0, 1700.0), (0.0, 1725.0), (0.0, 
    1750.0), (0.0, 1775.0), (0.0, 1800.0), (0.0, 1825.0), (0.0, 1850.0), (0.0, 
    1875.0), (0.0, 1900.0), (0.0, 1925.0), (0.0, 1950.0), (0.0, 1975.0), (0.0, 
    2000.0), (0.0, 2025.0), (0.0, 2050.0), (0.0, 2075.0), (0.0, 2100.0), (0.0, 
    2125.0), (0.0, 2150.0), (0.0, 2175.0), (0.0, 2200.0), (0.0, 2225.0), (0.0, 
    2250.0), (0.0, 2275.0), (0.0, 2300.0), (0.0, 2325.0), (0.0, 2350.0), (0.0, 
    2375.0), (0.0, 2400.0), (0.0, 2425.0), (0.0, 2450.0), (0.0, 2475.0), (0.0, 
    2500.0)), temperatureDependency=ON)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].ThermalConductance(
    clearanceDependency=OFF, definition=TABULAR, dependenciesP=0, 
    massFlowRateDependencyP=OFF, pressureDepTable=((10000.0, 0.0), (10000.0, 
    1000.0)), pressureDependency=ON, temperatureDependencyP=OFF)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].HeatGeneration(
    conversionFraction=0.9, slaveFraction=0.5)
mdb.models['Model-1'].ContactExp(createStepName='CuttingStep', name='contact')
mdb.models['Model-1'].interactions['contact'].includedPairs.setValuesInStep(
    stepName='CuttingStep', useAllstar=ON)
mdb.models['Model-1'].interactions['contact'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'tool-chip-contact'), (
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].surfaces['ChipPlateSurface'], 
    'Eulerian-1.inconel718-1', 'chip-plate-contact')), stepName='CuttingStep')
mdb.models['Model-1'].RigidBody(bodyRegion=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolDomain'], 
    name='ToolConstraint', refPointRegion=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['Model-1'].RigidBody(bodyRegion=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateDomain']
    , name='ChipPlateConstraint', refPointRegion=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='CuttingStep', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-WorkpieceBottom', region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceBottom']
    , v1=166.67, v2=0.0, v3=0.0, vr1=0.0, vr2=0.0, vr3=0.0)
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='CuttingStep', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-zLock', 
    region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain']
    , v1=UNSET, v2=UNSET, v3=0.0, vr1=UNSET, vr2=UNSET, vr3=UNSET)
mdb.models['Model-1'].EncastreBC(createStepName='CuttingStep', localCsys=None, 
    name='ToolFix', region=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['Model-1'].EncastreBC(createStepName='CuttingStep', localCsys=None, 
    name='ChipPlateFix', region=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['Model-1'].Velocity(distributionType=MAGNITUDE, field='', name=
    'cuttingMove', omega=0.0, region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain']
    , velocity1=166.67)
mdb.models['Model-1'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(20.0, ), name='InitialTemperature', region=
    mdb.models['Model-1'].rootAssembly.sets['AssembleSet'])
mdb.models['Model-1'].MaterialAssignment(assignmentList=((
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain'], 
    (0, )), (
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain'], 
    (1, ))), instanceList=(
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'], ), name=
    'MaterialAssignment', useFields=False)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='sim', nodalOutputPrecision=SINGLE, 
    numCpus=6, numDomains=6, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
from job import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models['Model-1'].Material(name='Inconel718')
mdb.models['Model-1'].materials['Inconel718'].SpecificHeat(dependencies=0, law=
    CONSTANTVOLUME, table=((4406000.0, 20.0), (459700.0, 100.0), (486700.0, 
    300.0), (520900.0, 500.0), (559900.0, 600.0), (610900.0, 700.0), (662000.0, 
    800.0), (651000.0, 900.0), (673000.0, 1000.0), (710100.0, 1200.0), (
    710100.0, 1500.0)), temperatureDependency=ON)
mdb.models['Model-1'].materials['Inconel718'].setValues(materialIdentifier='')
mdb.models['Model-1'].materials['Inconel718'].setValues(description=
    'Damage model and specific heat from DA718 [PENG20]\nProperties from literature - Mass Scaling 1000')
mdb.models['Model-1'].materials['Inconel718'].Elastic(dependencies=0, moduli=
    LONG_TERM, noCompression=OFF, noTension=OFF, table=((202565, 0.29, 21.11), 
    (201168, 0.29, 37.78), (198374, 0.29, 93.33), (195580, 0.28, 148.89), (
    192786, 0.28, 204.44), (189294, 0.28, 260), (186500, 0.27, 315.56), (
    183007, 0.27, 371.11), (180213, 0.27, 426.67), (176721, 0.27, 482.22), (
    173228, 0.27, 537.78), (169037, 0.28, 593.33), (165545, 0.28, 648.89), (
    160655, 0.29, 704.44), (155766, 0.31, 760), (148781, 0.32, 815.56), (
    141097, 0.33, 871.11), (131318, 0.33, 926.67), (121539, 0.34, 982.22), (
    111062, 0.37, 1037.78), (99885.5, 0.4, 1093.33)), temperatureDependency=ON, 
    type=ISOTROPIC)
mdb.models['Model-1'].materials['Inconel718'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((8.22e-06, ), ), 
    temperatureDependency=OFF)
mdb.models['Model-1'].materials['Inconel718'].InelasticHeatFraction(fraction=
    0.9)
mdb.models['Model-1'].materials['Inconel718'].Conductivity(dependencies=0, 
    table=((11.39, 21.11), (12.55, 93.33), (14.42, 204.44), (16.15, 315.56), (
    17.88, 426.67), (19.62, 537.78), (21.35, 648.89), (23.22, 760), (24.95, 
    871.11), (26.83, 982.22), (28.7, 1093.33)), temperatureDependency=ON, type=
    ISOTROPIC)
mdb.models['Model-1'].materials['Inconel718'].JohnsonCookDamageInitiation(
    alpha=0.0, definition=MSFLD, dependencies=0, direction=NMORI, feq=10.0, 
    fnn=10.0, fnt=10.0, frequency=1, ks=0.0, numberImperfections=4, omega=1.0, 
    position=CENTROID, table=((0.04, 0.75, -1.45, 0.04, 0.89, 1260, 25, 
    0.0001), ), temperatureDependency=OFF, tolerance=0.05)
mdb.models['Model-1'].materials['Inconel718'].johnsonCookDamageInitiation.DamageEvolution(
    degradation=MAXIMUM, dependencies=0, mixedModeBehavior=MODE_INDEPENDENT, 
    modeMixRatio=ENERGY, power=None, softening=TABULAR, table=((0, 0), (
    0.042900728, 0.0003298), (0.083303112, 0.0006596), (0.121352644, 
    0.0009894), (0.157186345, 0.0013192), (0.190933252, 0.001649), (
    0.222714893, 0.0019788), (0.252645716, 0.0023086), (0.280833503, 
    0.0026384), (0.30737976, 0.0029682), (0.332380085, 0.003298), (0.355924503, 
    0.0036278), (0.378097802, 0.0039576), (0.398979828, 0.0042874), (
    0.41864578, 0.0046172), (0.437166475, 0.004947), (0.45460861, 0.0052768), (
    0.471034993, 0.0056066), (0.486504779, 0.0059364), (0.501073674, 
    0.0062662), (0.514794143, 0.006596), (0.527715594, 0.0069258), (
    0.539884558, 0.0072556), (0.551344857, 0.0075854), (0.56213776, 0.0079152), 
    (0.572302133, 0.008245), (0.58187458, 0.0085748), (0.59088957, 0.0089046), 
    (0.599379568, 0.0092344), (0.607375148, 0.0095642), (0.614905101, 
    0.009894), (0.621996543, 0.0102238), (0.628675012, 0.0105536), (
    0.634964558, 0.0108834), (0.640887829, 0.0112132), (0.646466155, 0.011543), 
    (0.651719625, 0.0118728), (0.656667156, 0.0122026), (0.661326566, 
    0.0125324), (0.665714633, 0.0128622), (0.669847159, 0.013192), (
    0.673739025, 0.0135218), (0.677404247, 0.0138516), (0.680856023, 
    0.0141814), (0.684106782, 0.0145112), (0.687168233, 0.014841), (
    0.690051398, 0.0151708), (0.692766661, 0.0155006), (0.6953238, 0.0158304), 
    (0.697732022, 0.0161602), (0.7, 0.01649)), temperatureDependency=OFF, type=
    DISPLACEMENT)
mdb.models['Model-1'].materials['Inconel718'].Plastic(dataType=HALF_CYCLE, 
    dependencies=0, hardening=JOHNSON_COOK, numBackstresses=1, rate=OFF, 
    strainRangeDependency=OFF, table=((1200.0, 800.0, 0.4, 1.55, 1260.0, 25.0), 
    ), temperatureDependency=OFF)
mdb.models['Model-1'].materials['Inconel718'].plastic.RateDependent(
    dependencies=0, table=((0.0135, 0.001), ), temperatureDependency=OFF, type=
    JOHNSON_COOK)
mdb.models['Model-1'].Material(name='EMT210 - Extramet')
mdb.models['Model-1'].materials['EMT210 - Extramet'].Elastic(dependencies=0, 
    moduli=LONG_TERM, noCompression=OFF, noTension=OFF, table=((580000.0, 
    0.22), ), temperatureDependency=OFF, type=ISOTROPIC)
mdb.models['Model-1'].materials['EMT210 - Extramet'].Density(dependencies=0, 
    distributionType=UNIFORM, fieldName='', table=((1.445e-05, ), ), 
    temperatureDependency=OFF)
mdb.models['Model-1'].materials['EMT210 - Extramet'].setValues(description=
    '[SPRI02] Mass Scaling 1000\n89.0 % Wolframcarbid\n')
mdb.models['Model-1'].materials['EMT210 - Extramet'].SpecificHeat(dependencies=
    0, law=CONSTANTVOLUME, table=((222000.0, 87.0), (243000.0, 177.0), (
    259000.0, 277.0), (268000.0, 377.0), (293000.0, 477.0), (301000.0, 577.0), 
    (314000.0, 687.0)), temperatureDependency=ON)
mdb.models['Model-1'].materials['EMT210 - Extramet'].setValues(
    materialIdentifier='')
mdb.models['Model-1'].materials['EMT210 - Extramet'].Conductivity(dependencies=
    0, table=((85.0, 20.0), (70.4, 500.0), (68.6, 550.0), (68.4, 600.0), (66.8, 
    650.0), (64.7, 700.0)), temperatureDependency=ON, type=ISOTROPIC)
mdb.models['Model-1'].ConstrainedSketch(name='sketchChipPlate', sheetSize=
    200.0)
mdb.models['Model-1'].sketches['sketchChipPlate'].rectangle(point1=(0.0, 0.0), 
    point2=(2.15, 0.01))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='ChipPlate', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['ChipPlate'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['sketchChipPlate'])
mdb.models['Model-1'].parts['ChipPlate'].ReferencePoint(point=(0.0, 0.01, 
    0.01))
mdb.models['Model-1'].parts['ChipPlate'].Set(name='PlateRP', referencePoints=(
    mdb.models['Model-1'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['Model-1'].parts['ChipPlate'].Set(name='PlateRP', referencePoints=(
    mdb.models['Model-1'].parts['ChipPlate'].referencePoints[2], ))
mdb.models['Model-1'].parts['ChipPlate'].Set(cells=
    mdb.models['Model-1'].parts['ChipPlate'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='PlateDomain')
mdb.models['Model-1'].HomogeneousSolidSection(material='Inconel718', name=
    'ChipPlateSection', thickness=None)
mdb.models['Model-1'].parts['ChipPlate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['ChipPlate'].sets['PlateDomain'], sectionName=
    'ChipPlateSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['ChipPlate'].Surface(name='ChipPlateSurface', 
    side1Faces=
    mdb.models['Model-1'].parts['ChipPlate'].faces.getSequenceFromMask((
    '[#3f ]', ), ))
mdb.models['Model-1'].parts['ChipPlate'].setElementType(elemTypes=(None, 
    ElemType(elemCode=C3D6, elemLibrary=EXPLICIT), ElemType(elemCode=C3D4, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['ChipPlate'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['ChipPlate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['ChipPlate'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    33.75, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(33.75, 2.5), point2=
    (33.75, 10.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(30.0, 11.25), 
    point2=(20.0, 11.25))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(17.5, 13.75), 
    point2=(17.5, 23.75))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(13.75, 23.75), 
    point2=(0.0, 23.75))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 21.25), point2=
    (0.0, 5.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    16.3909759521484, -5.15337371826172), value=3.8, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].VerticalDimension(textPoint=(
    -3.11485934257507, 5.61979579925537), value=2.25, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    3.8, 3.125), value=2.35, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7])
mdb.models['Model-1'].sketches['__profile__'].VerticalDimension(textPoint=(
    5.7988452911377, 0.750127792358398), value=0.525, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Eulerian', type=
    EULERIAN)
mdb.models['Model-1'].parts['Eulerian'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.22, name='__profile__', 
    sheetSize=8.83, transform=
    mdb.models['Model-1'].parts['Eulerian'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Eulerian'].faces[6], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Eulerian'].edges[4], 
    sketchOrientation=RIGHT, origin=(1.41412, 1.016452, 0.02)))
mdb.models['Model-1'].parts['Eulerian'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.935, -0.605), 
    point2=(0.935, -0.824999999976717))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.44, 0.165), 
    point2=(-0.44, -0.495000000055879))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.165, 0.44), 
    point2=(-0.165, 0.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.275, 0.275), 
    point2=(0.275, 0.0549999999674037))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.66, -0.33), 
    point2=(-0.11, -0.33))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[15])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.99, -0.66), 
    point2=(0.11, -0.66))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.55, -0.825), 
    point2=(-0.222122233593836, -0.825))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[18])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[19], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.495, -0.605), 
    point2=(-0.274999999953434, -0.605))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[20])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[21], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.77, 0.11), 
    point2=(0.165000000037253, 0.11))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[22], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[23])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.045, -0.11), 
    point2=(0.0, -0.11))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[24], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[25], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -1.68507532417297, -0.90773503527832), value=0.2)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -1.90749935447693, -0.912672207214355), value=0.35)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.13980893432617, -0.922546789505005), value=0.5)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.41166071235657, -1.01141731486511), value=0.625)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], textPoint=(
    -2.64878467857361, -0.829298302986145), value=1.0)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], textPoint=(
    -0.843816559906006, 1.32369954838562), value=1.75)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], textPoint=(
    -0.478982728118897, 1.47714264645386), value=2.05)
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], textPoint=(
    -1.00703195869446, 1.64976604237366), value=2.25)
mdb.models['Model-1'].parts['Eulerian'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Eulerian'].faces.getSequenceFromMask((
    '[#40 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['Model-1'].parts['Eulerian'].edges[4])
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[3], 
    mdb.models['Model-1'].parts['Eulerian'].edges[4], 
    mdb.models['Model-1'].parts['Eulerian'].edges[13], 
    mdb.models['Model-1'].parts['Eulerian'].edges[16], 
    mdb.models['Model-1'].parts['Eulerian'].edges[31], 
    mdb.models['Model-1'].parts['Eulerian'].edges[34], 
    mdb.models['Model-1'].parts['Eulerian'].edges[50]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[85], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[30], 
    mdb.models['Model-1'].parts['Eulerian'].edges[37], 
    mdb.models['Model-1'].parts['Eulerian'].edges[44], 
    mdb.models['Model-1'].parts['Eulerian'].edges[49], 
    mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[63], 
    mdb.models['Model-1'].parts['Eulerian'].edges[74]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[90], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[51], 
    mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[66], 
    mdb.models['Model-1'].parts['Eulerian'].edges[70], 
    mdb.models['Model-1'].parts['Eulerian'].edges[79], 
    mdb.models['Model-1'].parts['Eulerian'].edges[80], 
    mdb.models['Model-1'].parts['Eulerian'].edges[88]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[95], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[60], 
    mdb.models['Model-1'].parts['Eulerian'].edges[72], 
    mdb.models['Model-1'].parts['Eulerian'].edges[83], 
    mdb.models['Model-1'].parts['Eulerian'].edges[92]), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[16], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#8 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[61], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[103], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#10 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[76], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[5], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#20 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[88], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[15], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#40 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[93], )
    , line=mdb.models['Model-1'].parts['Eulerian'].edges[22], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[93], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[13], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[94], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[12], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[103], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[11], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[111], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[18], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#400 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[121], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[24], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#800 ]', ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[125], 
    ), line=mdb.models['Model-1'].parts['Eulerian'].edges[31], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[123], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[42], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), edges=(mdb.models['Model-1'].parts['Eulerian'].edges[123], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[48], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#10000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[130], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[54], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#20000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[138], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[66], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#40000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[148], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[70], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#80000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[151], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[74], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[149], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[78], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[149], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[82], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#80000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[156], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[86], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#100000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[164], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[94], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#200000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[172], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[99], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#400000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[173], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[104], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#800000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[174], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[112], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#1000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[175], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[116], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#1000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[179], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[154], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#2000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[183], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[161], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#4000000 ]', ), ), edges=(
    mdb.models['Model-1'].parts['Eulerian'].edges[187], ), line=
    mdb.models['Model-1'].parts['Eulerian'].edges[166], sense=REVERSE)
mdb.models['Model-1'].parts['Eulerian'].Set(faces=
    mdb.models['Model-1'].parts['Eulerian'].faces.getSequenceFromMask((
    '[#0:2 #11000000 #5 #100 ]', ), ), name='WorkpieceBottom')
mdb.models['Model-1'].parts['Eulerian'].Set(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), name='EulerDomain')
mdb.models['Model-1'].parts['Eulerian'].Set(cells=
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#e0fc0e00 ]', ), ), name='WorkpieceDomain')
mdb.models['Model-1'].EulerianSection(data={'inconel718-1': 'Inconel718'}, 
    name='EulerSection')
mdb.models['Model-1'].parts['Eulerian'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Eulerian'].sets['EulerDomain'], sectionName=
    'EulerSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Eulerian'].setElementType(elemTypes=(ElemType(
    elemCode=EC3D8RT, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=UNKNOWN_WEDGE, 
    elemLibrary=EXPLICIT), ElemType(elemCode=UNKNOWN_TET, 
    elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Eulerian'].cells.getSequenceFromMask((
    '[#ffffffff ]', ), ), ))
mdb.models['Model-1'].parts['Eulerian'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:4 #4808082 #10000002 #4 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:4 #40241008 #20000050 ]', ), ), maxSize=0.03, minSize=0.015)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:2 #80000000 #1081404 #0 #2080000 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0:3 #308400c2 #0 #200000 ]', ), ), maxSize=0.01, minSize=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#42800000 #61414a53 #14a194d1 #0:2 #8838000 ]', ), ), minSizeFactor=0.1, 
    size=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#428505 #0:4 #1400 #1 ]', ), ), minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0 #2000000 #0:3 #40000000 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#0 #18000000 #0 #14000 #0 #1402000 #10 ]', ), ), maxSize=0.03, minSize=
    0.015)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#346800 #342180 #631c6000 #302318 #9a584000 #403a5 #2 ]', ), ), 
    minSizeFactor=0.1, size=0.005)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#200000d0 #8 #208 #6000000 #12040 ]', ), ), minSizeFactor=0.1, size=0.01)
mdb.models['Model-1'].parts['Eulerian'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Eulerian'].edges.getSequenceFromMask((
    '[#14000000 #4 #104 #40000000 #521 #84000000 ]', ), ), minSizeFactor=0.1, 
    size=0.02)
mdb.models['Model-1'].parts['Eulerian'].generateMesh()
mdb.models['Model-1'].ConstrainedSketch(name='SketchTool', sheetSize=200.0)
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(0.0, 0.0), point2=(
    10.6401720046997, 0.0))
mdb.models['Model-1'].sketches['SketchTool'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[2])
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(0.0, 10.0), point2=(
    0.0, 1.25))
mdb.models['Model-1'].sketches['SketchTool'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].setAsConstruction(objectList=(
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3], 
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2]))
mdb.models['Model-1'].sketches['SketchTool'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(3.31129169464111, 
    1.25408506393433), point2=(11.7126932144165, 5.62865686416626))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(11.98082447052, 
    7.72666597366333), point2=(11.98082447052, 13.75))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(9.38889980316162, 
    13.6635837554932), point2=(3.17722415924072, 13.6635837554932))
mdb.models['Model-1'].sketches['SketchTool'].Line(point1=(3.75, 12.5), point2=(
    2.99847316741943, 3.93239545822144))
mdb.models['Model-1'].sketches['SketchTool'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[6])
mdb.models['Model-1'].sketches['SketchTool'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['SketchTool'].geometry[5])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[5])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[7])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[9])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[4], line2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2], textPoint=(
    18.2371864318848, 2.41468572616577), value=6.0)
mdb.models['Model-1'].sketches['SketchTool'].ObliqueDimension(textPoint=(
    10.5507974624634, -1.29030799865723), value=0.5, vertex1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[5])
mdb.models['Model-1'].sketches['SketchTool'].AngularDimension(line1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[7], line2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3], textPoint=(
    0.31717586517334, 7.36955785751343), value=6.0)
mdb.models['Model-1'].sketches['SketchTool'].ObliqueDimension(textPoint=(0.0, 
    8.75), value=0.5, vertex1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[0])
mdb.models['Model-1'].sketches['SketchTool'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[4], curve2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[7], nearPoint1=(
    3.86042213439941, 1.10268461704254), nearPoint2=(4.32205963134766, 
    0.249606490135193), radius=0.01)
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[2])
mdb.models['Model-1'].sketches['SketchTool'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['SketchTool'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['SketchTool'].geometry[3])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Tool', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Tool'].BaseSolidExtrude(depth=0.02, sketch=
    mdb.models['Model-1'].sketches['SketchTool'])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.03, name='__profile__', 
    sheetSize=1.41, transform=
    mdb.models['Model-1'].parts['Tool'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Tool'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Tool'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.259921, 0.250539, 0.02)))
mdb.models['Model-1'].parts['Tool'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.1425, -0.225), 
    point2=(0.135, -0.2025))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.2025, -0.165), 
    point2=(-0.1725, -0.015))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.250097722407341, 
    -0.243631335760593), point2=(-0.25009772240734, -0.24750000002794))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.257777099158525, 
    -0.239467180187941), point2=(-0.25196271459572, -0.239467180187941))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].constraints[33], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[30]))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].parts['Tool'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Tool'].faces.getSequenceFromMask(('[#20 ]', ), 
    ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['Tool'].edges[7])
mdb.models['Model-1'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['Tool'].edges[3], 
    mdb.models['Model-1'].parts['Tool'].edges[7]), line=
    mdb.models['Model-1'].parts['Tool'].edges[15], sense=REVERSE)
mdb.models['Model-1'].parts['Tool'].PartitionCellByExtrudeEdge(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), edges=(mdb.models['Model-1'].parts['Tool'].edges[12], 
    mdb.models['Model-1'].parts['Tool'].edges[14]), line=
    mdb.models['Model-1'].parts['Tool'].edges[20], sense=REVERSE)
mdb.models['Model-1'].parts['Tool'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Tool'].InterestingPoint(
    mdb.models['Model-1'].parts['Tool'].edges[8], MIDDLE))
mdb.models['Model-1'].parts['Tool'].Set(name='ToolRP', referencePoints=(
    mdb.models['Model-1'].parts['Tool'].referencePoints[5], ))
mdb.models['Model-1'].parts['Tool'].Set(cells=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#7f ]', ), 
    ), name='ToolDomain')
mdb.models['Model-1'].HomogeneousSolidSection(material='EMT210 - Extramet', 
    name='ToolSection', thickness=None)
mdb.models['Model-1'].parts['Tool'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Tool'].sets['ToolDomain'], sectionName=
    'ToolSection', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Tool'].Surface(name='ToolSurface', side1Faces=
    mdb.models['Model-1'].parts['Tool'].faces.getSequenceFromMask(('[#19000 ]', 
    ), ))
mdb.models['Model-1'].parts['Tool'].setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask((
    '[#f ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['Tool'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['Model-1'].parts['Tool'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#f ]', ), 
    ), ))
mdb.models['Model-1'].parts['Tool'].seedEdgeByBias(biasMethod=SINGLE, 
    constraint=FINER, end1Edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#2242490 ]', ), ), end2Edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#480a40 ]', ), ), maxSize=0.03, minSize=0.01)
mdb.models['Model-1'].parts['Tool'].seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#3190d005 ]', ), ), minSizeFactor=0.1, size=0.003)
mdb.models['Model-1'].parts['Tool'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Tool'].cells.getSequenceFromMask(('[#8 ]', ), 
    ))
mdb.models['Model-1'].parts['Tool'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Tool'].edges.getSequenceFromMask((
    '[#10000000 ]', ), ), number=4)
mdb.models['Model-1'].parts['Tool'].generateMesh()
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='ChipPlate-1', 
    part=mdb.models['Model-1'].parts['ChipPlate'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Eulerian-1', 
    part=mdb.models['Model-1'].parts['Eulerian'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Tool-1', part=
    mdb.models['Model-1'].parts['Tool'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ChipPlate-1', ), 
    vector=(0, 0.535, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Tool-1', ), vector=
    (2.269009, 0.525, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Tool-1', ), vector=
    (0.0, -0.025, 0.0))
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].cells.getSequenceFromMask(
    mask=('[#ffffffff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].cells.getSequenceFromMask(
    mask=('[#f ]', ), ), name='AssembleSet')
mdb.models['Model-1'].TempDisplacementDynamicsStep(improvedDtMethod=ON, name=
    'CuttingStep', previous='Initial', timePeriod=0.006)
mdb.models['Model-1'].FieldOutputRequest(createStepName='CuttingStep', name=
    'FieldOutput', variables=('CSTRESS', 'DMICRT', 'ER', 'EVF', 'NT', 'PE', 
    'PEEQ', 'PEEQMAX', 'RF', 'S', 'SDEG'))
mdb.models['Model-1'].fieldOutputRequests['FieldOutput'].setValues(
    numIntervals=50)
mdb.models['Model-1'].HistoryOutputRequest(createStepName='CuttingStep', name=
    'CuttingForce', numIntervals=1000, rebar=EXCLUDE, region=
    mdb.models['Model-1'].rootAssembly.allInstances['Tool-1'].sets['ToolRP'], 
    sectionPoints=DEFAULT, variables=('RF1', 'RF2'))
del mdb.models['Model-1'].fieldOutputRequests['F-Output-1']
del mdb.models['Model-1'].historyOutputRequests['H-Output-1']
mdb.models['Model-1'].ContactProperty('chip-plate-contact')
mdb.models['Model-1'].interactionProperties['chip-plate-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.01, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['chip-plate-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('self-contact')
mdb.models['Model-1'].interactionProperties['self-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.015, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['self-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('tool-chip-contact')
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.5544, 0.0), (0.5544, 25.0), (0.5544, 50.0), (0.5544, 75.0), (
    0.5544, 100.0), (0.5544, 125.0), (0.5544, 150.0), (0.5544, 175.0), (0.5544, 
    200.0), (0.5544, 225.0), (0.5544, 250.0), (0.5544, 275.0), (0.5544, 300.0), 
    (0.5544, 325.0), (0.5544, 350.0), (0.5544, 375.0), (0.5544, 400.0), (
    0.5544, 425.0), (0.5544, 450.0), (0.5544, 475.0), (0.5544, 500.0), (0.5544, 
    525.0), (0.5544, 550.0), (0.5544, 575.0), (0.5544, 600.0), (0.5544, 625.0), 
    (0.5544, 650.0), (0.5544, 675.0), (0.5544, 680.0), (0.5535, 680.1), (
    0.5084, 700.0), (0.4706, 725.0), (0.4383, 750.0), (0.4088, 775.0), (0.3814, 
    800.0), (0.3554, 825.0), (0.3306, 850.0), (0.3067, 875.0), (0.2836, 900.0), 
    (0.2612, 925.0), (0.2394, 950.0), (0.2181, 975.0), (0.1972, 1000.0), (
    0.1768, 1025.0), (0.1567, 1050.0), (0.137, 1075.0), (0.1177, 1100.0), (
    0.0986, 1125.0), (0.0798, 1150.0), (0.0613, 1175.0), (0.043, 1200.0), (
    0.0249, 1225.0), (0.0071, 1250.0), (0.0, 1260.0), (0.0, 1350.0), (0.0, 
    1375.0), (0.0, 1400.0), (0.0, 1425.0), (0.0, 1450.0), (0.0, 1475.0), (0.0, 
    1500.0), (0.0, 1525.0), (0.0, 1550.0), (0.0, 1575.0), (0.0, 1600.0), (0.0, 
    1625.0), (0.0, 1650.0), (0.0, 1675.0), (0.0, 1700.0), (0.0, 1725.0), (0.0, 
    1750.0), (0.0, 1775.0), (0.0, 1800.0), (0.0, 1825.0), (0.0, 1850.0), (0.0, 
    1875.0), (0.0, 1900.0), (0.0, 1925.0), (0.0, 1950.0), (0.0, 1975.0), (0.0, 
    2000.0), (0.0, 2025.0), (0.0, 2050.0), (0.0, 2075.0), (0.0, 2100.0), (0.0, 
    2125.0), (0.0, 2150.0), (0.0, 2175.0), (0.0, 2200.0), (0.0, 2225.0), (0.0, 
    2250.0), (0.0, 2275.0), (0.0, 2300.0), (0.0, 2325.0), (0.0, 2350.0), (0.0, 
    2375.0), (0.0, 2400.0), (0.0, 2425.0), (0.0, 2450.0), (0.0, 2475.0), (0.0, 
    2500.0)), temperatureDependency=ON)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].ThermalConductance(
    clearanceDependency=OFF, definition=TABULAR, dependenciesP=0, 
    massFlowRateDependencyP=OFF, pressureDepTable=((10000.0, 0.0), (10000.0, 
    1000.0)), pressureDependency=ON, temperatureDependencyP=OFF)
mdb.models['Model-1'].interactionProperties['tool-chip-contact'].HeatGeneration(
    conversionFraction=0.9, slaveFraction=0.5)
mdb.models['Model-1'].ContactExp(createStepName='CuttingStep', name='contact')
mdb.models['Model-1'].interactions['contact'].includedPairs.setValuesInStep(
    stepName='CuttingStep', useAllstar=ON)
mdb.models['Model-1'].interactions['contact'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'tool-chip-contact'), (
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].surfaces['ChipPlateSurface'], 
    'Eulerian-1.inconel718-1', 'chip-plate-contact')), stepName='CuttingStep')
mdb.models['Model-1'].RigidBody(bodyRegion=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolDomain'], 
    name='ToolConstraint', refPointRegion=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['Model-1'].RigidBody(bodyRegion=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateDomain']
    , name='ChipPlateConstraint', refPointRegion=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='CuttingStep', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-WorkpieceBottom', region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceBottom']
    , v1=166.67, v2=0.0, v3=0.0, vr1=0.0, vr2=0.0, vr3=0.0)
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='CuttingStep', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-zLock', 
    region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain']
    , v1=UNSET, v2=UNSET, v3=0.0, vr1=UNSET, vr2=UNSET, vr3=UNSET)
mdb.models['Model-1'].EncastreBC(createStepName='CuttingStep', localCsys=None, 
    name='ToolFix', region=
    mdb.models['Model-1'].rootAssembly.instances['Tool-1'].sets['ToolRP'])
mdb.models['Model-1'].EncastreBC(createStepName='CuttingStep', localCsys=None, 
    name='ChipPlateFix', region=
    mdb.models['Model-1'].rootAssembly.instances['ChipPlate-1'].sets['PlateRP'])
mdb.models['Model-1'].Velocity(distributionType=MAGNITUDE, field='', name=
    'cuttingMove', omega=0.0, region=
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain']
    , velocity1=166.67)
mdb.models['Model-1'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(20.0, ), name='InitialTemperature', region=
    mdb.models['Model-1'].rootAssembly.sets['AssembleSet'])
mdb.models['Model-1'].MaterialAssignment(assignmentList=((
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['EulerDomain'], 
    (0, )), (
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'].sets['WorkpieceDomain'], 
    (1, ))), instanceList=(
    mdb.models['Model-1'].rootAssembly.instances['Eulerian-1'], ), name=
    'MaterialAssignment', useFields=False)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='sim', nodalOutputPrecision=SINGLE, 
    numCpus=6, numDomains=6, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['restartMode']
# Save by adam-ua769pu3t3n7k4o on 2024_12_11-08.36.54; build 2021 2020_03_06-15.50.37 167380
